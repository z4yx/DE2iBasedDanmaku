// de2i_150_qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module de2i_150_qsys_mm_interconnect_0 (
		input  wire        pcie_ip_pcie_core_clk_clk,                                   //                                 pcie_ip_pcie_core_clk.clk
		input  wire        pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset, // pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_reset_reset_bridge_in_reset_reset,                     //                     sgdma_reset_reset_bridge_in_reset.reset
		input  wire [31:0] pcie_ip_bar1_0_address,                                      //                                        pcie_ip_bar1_0.address
		output wire        pcie_ip_bar1_0_waitrequest,                                  //                                                      .waitrequest
		input  wire [6:0]  pcie_ip_bar1_0_burstcount,                                   //                                                      .burstcount
		input  wire [7:0]  pcie_ip_bar1_0_byteenable,                                   //                                                      .byteenable
		input  wire        pcie_ip_bar1_0_read,                                         //                                                      .read
		output wire [63:0] pcie_ip_bar1_0_readdata,                                     //                                                      .readdata
		output wire        pcie_ip_bar1_0_readdatavalid,                                //                                                      .readdatavalid
		input  wire        pcie_ip_bar1_0_write,                                        //                                                      .write
		input  wire [63:0] pcie_ip_bar1_0_writedata,                                    //                                                      .writedata
		input  wire [31:0] sgdma_descriptor_read_address,                               //                                 sgdma_descriptor_read.address
		output wire        sgdma_descriptor_read_waitrequest,                           //                                                      .waitrequest
		input  wire        sgdma_descriptor_read_read,                                  //                                                      .read
		output wire [31:0] sgdma_descriptor_read_readdata,                              //                                                      .readdata
		output wire        sgdma_descriptor_read_readdatavalid,                         //                                                      .readdatavalid
		input  wire [31:0] sgdma_descriptor_write_address,                              //                                sgdma_descriptor_write.address
		output wire        sgdma_descriptor_write_waitrequest,                          //                                                      .waitrequest
		input  wire        sgdma_descriptor_write_write,                                //                                                      .write
		input  wire [31:0] sgdma_descriptor_write_writedata,                            //                                                      .writedata
		input  wire [31:0] sgdma_m_read_address,                                        //                                          sgdma_m_read.address
		output wire        sgdma_m_read_waitrequest,                                    //                                                      .waitrequest
		input  wire        sgdma_m_read_read,                                           //                                                      .read
		output wire [63:0] sgdma_m_read_readdata,                                       //                                                      .readdata
		output wire        sgdma_m_read_readdatavalid,                                  //                                                      .readdatavalid
		input  wire [31:0] sgdma_m_write_address,                                       //                                         sgdma_m_write.address
		output wire        sgdma_m_write_waitrequest,                                   //                                                      .waitrequest
		input  wire [7:0]  sgdma_m_write_byteenable,                                    //                                                      .byteenable
		input  wire        sgdma_m_write_write,                                         //                                                      .write
		input  wire [63:0] sgdma_m_write_writedata,                                     //                                                      .writedata
		output wire [1:0]  button_s1_address,                                           //                                             button_s1.address
		output wire        button_s1_write,                                             //                                                      .write
		input  wire [31:0] button_s1_readdata,                                          //                                                      .readdata
		output wire [31:0] button_s1_writedata,                                         //                                                      .writedata
		output wire        button_s1_chipselect,                                        //                                                      .chipselect
		output wire [1:0]  led_s1_address,                                              //                                                led_s1.address
		output wire        led_s1_write,                                                //                                                      .write
		input  wire [31:0] led_s1_readdata,                                             //                                                      .readdata
		output wire [31:0] led_s1_writedata,                                            //                                                      .writedata
		output wire        led_s1_chipselect,                                           //                                                      .chipselect
		output wire [13:0] onchip_memory_s1_address,                                    //                                      onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                                      //                                                      .write
		input  wire [63:0] onchip_memory_s1_readdata,                                   //                                                      .readdata
		output wire [63:0] onchip_memory_s1_writedata,                                  //                                                      .writedata
		output wire [7:0]  onchip_memory_s1_byteenable,                                 //                                                      .byteenable
		output wire        onchip_memory_s1_chipselect,                                 //                                                      .chipselect
		output wire        onchip_memory_s1_clken,                                      //                                                      .clken
		output wire [30:0] pcie_ip_txs_address,                                         //                                           pcie_ip_txs.address
		output wire        pcie_ip_txs_write,                                           //                                                      .write
		output wire        pcie_ip_txs_read,                                            //                                                      .read
		input  wire [63:0] pcie_ip_txs_readdata,                                        //                                                      .readdata
		output wire [63:0] pcie_ip_txs_writedata,                                       //                                                      .writedata
		output wire [6:0]  pcie_ip_txs_burstcount,                                      //                                                      .burstcount
		output wire [7:0]  pcie_ip_txs_byteenable,                                      //                                                      .byteenable
		input  wire        pcie_ip_txs_readdatavalid,                                   //                                                      .readdatavalid
		input  wire        pcie_ip_txs_waitrequest,                                     //                                                      .waitrequest
		output wire        pcie_ip_txs_chipselect,                                      //                                                      .chipselect
		output wire [21:0] ssram0_uas_address,                                          //                                            ssram0_uas.address
		output wire        ssram0_uas_write,                                            //                                                      .write
		output wire        ssram0_uas_read,                                             //                                                      .read
		input  wire [31:0] ssram0_uas_readdata,                                         //                                                      .readdata
		output wire [31:0] ssram0_uas_writedata,                                        //                                                      .writedata
		output wire [2:0]  ssram0_uas_burstcount,                                       //                                                      .burstcount
		output wire [3:0]  ssram0_uas_byteenable,                                       //                                                      .byteenable
		input  wire        ssram0_uas_readdatavalid,                                    //                                                      .readdatavalid
		input  wire        ssram0_uas_waitrequest,                                      //                                                      .waitrequest
		output wire        ssram0_uas_lock,                                             //                                                      .lock
		output wire        ssram0_uas_debugaccess,                                      //                                                      .debugaccess
		output wire [21:0] ssram1_uas_address,                                          //                                            ssram1_uas.address
		output wire        ssram1_uas_write,                                            //                                                      .write
		output wire        ssram1_uas_read,                                             //                                                      .read
		input  wire [31:0] ssram1_uas_readdata,                                         //                                                      .readdata
		output wire [31:0] ssram1_uas_writedata,                                        //                                                      .writedata
		output wire [2:0]  ssram1_uas_burstcount,                                       //                                                      .burstcount
		output wire [3:0]  ssram1_uas_byteenable,                                       //                                                      .byteenable
		input  wire        ssram1_uas_readdatavalid,                                    //                                                      .readdatavalid
		input  wire        ssram1_uas_waitrequest,                                      //                                                      .waitrequest
		output wire        ssram1_uas_lock,                                             //                                                      .lock
		output wire        ssram1_uas_debugaccess                                       //                                                      .debugaccess
	);

	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest;           // pcie_ip_bar1_0_agent:av_waitrequest -> pcie_ip_bar1_0_translator:uav_waitrequest
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata;              // pcie_ip_bar1_0_agent:av_readdata -> pcie_ip_bar1_0_translator:uav_readdata
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess;           // pcie_ip_bar1_0_translator:uav_debugaccess -> pcie_ip_bar1_0_agent:av_debugaccess
	wire   [31:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_address;               // pcie_ip_bar1_0_translator:uav_address -> pcie_ip_bar1_0_agent:av_address
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_read;                  // pcie_ip_bar1_0_translator:uav_read -> pcie_ip_bar1_0_agent:av_read
	wire    [7:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable;            // pcie_ip_bar1_0_translator:uav_byteenable -> pcie_ip_bar1_0_agent:av_byteenable
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid;         // pcie_ip_bar1_0_agent:av_readdatavalid -> pcie_ip_bar1_0_translator:uav_readdatavalid
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_lock;                  // pcie_ip_bar1_0_translator:uav_lock -> pcie_ip_bar1_0_agent:av_lock
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_write;                 // pcie_ip_bar1_0_translator:uav_write -> pcie_ip_bar1_0_agent:av_write
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata;             // pcie_ip_bar1_0_translator:uav_writedata -> pcie_ip_bar1_0_agent:av_writedata
	wire    [9:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount;            // pcie_ip_bar1_0_translator:uav_burstcount -> pcie_ip_bar1_0_agent:av_burstcount
	wire          sgdma_m_read_translator_avalon_universal_master_0_waitrequest;             // sgdma_m_read_agent:av_waitrequest -> sgdma_m_read_translator:uav_waitrequest
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_readdata;                // sgdma_m_read_agent:av_readdata -> sgdma_m_read_translator:uav_readdata
	wire          sgdma_m_read_translator_avalon_universal_master_0_debugaccess;             // sgdma_m_read_translator:uav_debugaccess -> sgdma_m_read_agent:av_debugaccess
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_address;                 // sgdma_m_read_translator:uav_address -> sgdma_m_read_agent:av_address
	wire          sgdma_m_read_translator_avalon_universal_master_0_read;                    // sgdma_m_read_translator:uav_read -> sgdma_m_read_agent:av_read
	wire    [7:0] sgdma_m_read_translator_avalon_universal_master_0_byteenable;              // sgdma_m_read_translator:uav_byteenable -> sgdma_m_read_agent:av_byteenable
	wire          sgdma_m_read_translator_avalon_universal_master_0_readdatavalid;           // sgdma_m_read_agent:av_readdatavalid -> sgdma_m_read_translator:uav_readdatavalid
	wire          sgdma_m_read_translator_avalon_universal_master_0_lock;                    // sgdma_m_read_translator:uav_lock -> sgdma_m_read_agent:av_lock
	wire          sgdma_m_read_translator_avalon_universal_master_0_write;                   // sgdma_m_read_translator:uav_write -> sgdma_m_read_agent:av_write
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_writedata;               // sgdma_m_read_translator:uav_writedata -> sgdma_m_read_agent:av_writedata
	wire    [3:0] sgdma_m_read_translator_avalon_universal_master_0_burstcount;              // sgdma_m_read_translator:uav_burstcount -> sgdma_m_read_agent:av_burstcount
	wire          sgdma_m_write_translator_avalon_universal_master_0_waitrequest;            // sgdma_m_write_agent:av_waitrequest -> sgdma_m_write_translator:uav_waitrequest
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_readdata;               // sgdma_m_write_agent:av_readdata -> sgdma_m_write_translator:uav_readdata
	wire          sgdma_m_write_translator_avalon_universal_master_0_debugaccess;            // sgdma_m_write_translator:uav_debugaccess -> sgdma_m_write_agent:av_debugaccess
	wire   [31:0] sgdma_m_write_translator_avalon_universal_master_0_address;                // sgdma_m_write_translator:uav_address -> sgdma_m_write_agent:av_address
	wire          sgdma_m_write_translator_avalon_universal_master_0_read;                   // sgdma_m_write_translator:uav_read -> sgdma_m_write_agent:av_read
	wire    [7:0] sgdma_m_write_translator_avalon_universal_master_0_byteenable;             // sgdma_m_write_translator:uav_byteenable -> sgdma_m_write_agent:av_byteenable
	wire          sgdma_m_write_translator_avalon_universal_master_0_readdatavalid;          // sgdma_m_write_agent:av_readdatavalid -> sgdma_m_write_translator:uav_readdatavalid
	wire          sgdma_m_write_translator_avalon_universal_master_0_lock;                   // sgdma_m_write_translator:uav_lock -> sgdma_m_write_agent:av_lock
	wire          sgdma_m_write_translator_avalon_universal_master_0_write;                  // sgdma_m_write_translator:uav_write -> sgdma_m_write_agent:av_write
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_writedata;              // sgdma_m_write_translator:uav_writedata -> sgdma_m_write_agent:av_writedata
	wire    [3:0] sgdma_m_write_translator_avalon_universal_master_0_burstcount;             // sgdma_m_write_translator:uav_burstcount -> sgdma_m_write_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> sgdma_m_write_agent:rp_valid
	wire  [148:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> sgdma_m_write_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                     // sgdma_m_write_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [5:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> sgdma_m_write_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> sgdma_m_write_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> sgdma_m_write_agent:rp_endofpacket
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest;    // sgdma_descriptor_read_agent:av_waitrequest -> sgdma_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_readdata;       // sgdma_descriptor_read_agent:av_readdata -> sgdma_descriptor_read_translator:uav_readdata
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess;    // sgdma_descriptor_read_translator:uav_debugaccess -> sgdma_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_address;        // sgdma_descriptor_read_translator:uav_address -> sgdma_descriptor_read_agent:av_address
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_read;           // sgdma_descriptor_read_translator:uav_read -> sgdma_descriptor_read_agent:av_read
	wire    [3:0] sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable;     // sgdma_descriptor_read_translator:uav_byteenable -> sgdma_descriptor_read_agent:av_byteenable
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;  // sgdma_descriptor_read_agent:av_readdatavalid -> sgdma_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_lock;           // sgdma_descriptor_read_translator:uav_lock -> sgdma_descriptor_read_agent:av_lock
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_write;          // sgdma_descriptor_read_translator:uav_write -> sgdma_descriptor_read_agent:av_write
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_writedata;      // sgdma_descriptor_read_translator:uav_writedata -> sgdma_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount;     // sgdma_descriptor_read_translator:uav_burstcount -> sgdma_descriptor_read_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                     // rsp_mux_003:src_valid -> sgdma_descriptor_read_agent:rp_valid
	wire  [112:0] rsp_mux_003_src_data;                                                      // rsp_mux_003:src_data -> sgdma_descriptor_read_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                     // sgdma_descriptor_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [5:0] rsp_mux_003_src_channel;                                                   // rsp_mux_003:src_channel -> sgdma_descriptor_read_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                             // rsp_mux_003:src_startofpacket -> sgdma_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                               // rsp_mux_003:src_endofpacket -> sgdma_descriptor_read_agent:rp_endofpacket
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest;   // sgdma_descriptor_write_agent:av_waitrequest -> sgdma_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_readdata;      // sgdma_descriptor_write_agent:av_readdata -> sgdma_descriptor_write_translator:uav_readdata
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess;   // sgdma_descriptor_write_translator:uav_debugaccess -> sgdma_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_address;       // sgdma_descriptor_write_translator:uav_address -> sgdma_descriptor_write_agent:av_address
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_read;          // sgdma_descriptor_write_translator:uav_read -> sgdma_descriptor_write_agent:av_read
	wire    [3:0] sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable;    // sgdma_descriptor_write_translator:uav_byteenable -> sgdma_descriptor_write_agent:av_byteenable
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid; // sgdma_descriptor_write_agent:av_readdatavalid -> sgdma_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_lock;          // sgdma_descriptor_write_translator:uav_lock -> sgdma_descriptor_write_agent:av_lock
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_write;         // sgdma_descriptor_write_translator:uav_write -> sgdma_descriptor_write_agent:av_write
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_writedata;     // sgdma_descriptor_write_translator:uav_writedata -> sgdma_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount;    // sgdma_descriptor_write_translator:uav_burstcount -> sgdma_descriptor_write_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                     // rsp_mux_004:src_valid -> sgdma_descriptor_write_agent:rp_valid
	wire  [112:0] rsp_mux_004_src_data;                                                      // rsp_mux_004:src_data -> sgdma_descriptor_write_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                     // sgdma_descriptor_write_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [5:0] rsp_mux_004_src_channel;                                                   // rsp_mux_004:src_channel -> sgdma_descriptor_write_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                             // rsp_mux_004:src_startofpacket -> sgdma_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                               // rsp_mux_004:src_endofpacket -> sgdma_descriptor_write_agent:rp_endofpacket
	wire   [63:0] onchip_memory_s1_agent_m0_readdata;                                        // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                                     // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                                     // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                                         // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire    [7:0] onchip_memory_s1_agent_m0_byteenable;                                      // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                            // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                   // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                            // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire   [63:0] onchip_memory_s1_agent_m0_writedata;                                       // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                           // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire    [3:0] onchip_memory_s1_agent_m0_burstcount;                                      // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                                    // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [149:0] onchip_memory_s1_agent_rf_source_data;                                     // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                    // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                            // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                              // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                 // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [149:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                  // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                 // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                         // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                           // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                                  // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                               // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                               // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [31:0] led_s1_agent_m0_address;                                                   // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                      // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                             // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                      // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                 // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                     // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                              // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [113:0] led_s1_agent_rf_source_data;                                               // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                              // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                      // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                        // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                           // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [113:0] led_s1_agent_rsp_fifo_out_data;                                            // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                           // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                   // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                     // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire   [31:0] button_s1_agent_m0_readdata;                                               // button_s1_translator:uav_readdata -> button_s1_agent:m0_readdata
	wire          button_s1_agent_m0_waitrequest;                                            // button_s1_translator:uav_waitrequest -> button_s1_agent:m0_waitrequest
	wire          button_s1_agent_m0_debugaccess;                                            // button_s1_agent:m0_debugaccess -> button_s1_translator:uav_debugaccess
	wire   [31:0] button_s1_agent_m0_address;                                                // button_s1_agent:m0_address -> button_s1_translator:uav_address
	wire    [3:0] button_s1_agent_m0_byteenable;                                             // button_s1_agent:m0_byteenable -> button_s1_translator:uav_byteenable
	wire          button_s1_agent_m0_read;                                                   // button_s1_agent:m0_read -> button_s1_translator:uav_read
	wire          button_s1_agent_m0_readdatavalid;                                          // button_s1_translator:uav_readdatavalid -> button_s1_agent:m0_readdatavalid
	wire          button_s1_agent_m0_lock;                                                   // button_s1_agent:m0_lock -> button_s1_translator:uav_lock
	wire   [31:0] button_s1_agent_m0_writedata;                                              // button_s1_agent:m0_writedata -> button_s1_translator:uav_writedata
	wire          button_s1_agent_m0_write;                                                  // button_s1_agent:m0_write -> button_s1_translator:uav_write
	wire    [2:0] button_s1_agent_m0_burstcount;                                             // button_s1_agent:m0_burstcount -> button_s1_translator:uav_burstcount
	wire          button_s1_agent_rf_source_valid;                                           // button_s1_agent:rf_source_valid -> button_s1_agent_rsp_fifo:in_valid
	wire  [113:0] button_s1_agent_rf_source_data;                                            // button_s1_agent:rf_source_data -> button_s1_agent_rsp_fifo:in_data
	wire          button_s1_agent_rf_source_ready;                                           // button_s1_agent_rsp_fifo:in_ready -> button_s1_agent:rf_source_ready
	wire          button_s1_agent_rf_source_startofpacket;                                   // button_s1_agent:rf_source_startofpacket -> button_s1_agent_rsp_fifo:in_startofpacket
	wire          button_s1_agent_rf_source_endofpacket;                                     // button_s1_agent:rf_source_endofpacket -> button_s1_agent_rsp_fifo:in_endofpacket
	wire          button_s1_agent_rsp_fifo_out_valid;                                        // button_s1_agent_rsp_fifo:out_valid -> button_s1_agent:rf_sink_valid
	wire  [113:0] button_s1_agent_rsp_fifo_out_data;                                         // button_s1_agent_rsp_fifo:out_data -> button_s1_agent:rf_sink_data
	wire          button_s1_agent_rsp_fifo_out_ready;                                        // button_s1_agent:rf_sink_ready -> button_s1_agent_rsp_fifo:out_ready
	wire          button_s1_agent_rsp_fifo_out_startofpacket;                                // button_s1_agent_rsp_fifo:out_startofpacket -> button_s1_agent:rf_sink_startofpacket
	wire          button_s1_agent_rsp_fifo_out_endofpacket;                                  // button_s1_agent_rsp_fifo:out_endofpacket -> button_s1_agent:rf_sink_endofpacket
	wire   [31:0] ssram0_uas_agent_m0_readdata;                                              // ssram0_uas_translator:uav_readdata -> ssram0_uas_agent:m0_readdata
	wire          ssram0_uas_agent_m0_waitrequest;                                           // ssram0_uas_translator:uav_waitrequest -> ssram0_uas_agent:m0_waitrequest
	wire          ssram0_uas_agent_m0_debugaccess;                                           // ssram0_uas_agent:m0_debugaccess -> ssram0_uas_translator:uav_debugaccess
	wire   [31:0] ssram0_uas_agent_m0_address;                                               // ssram0_uas_agent:m0_address -> ssram0_uas_translator:uav_address
	wire    [3:0] ssram0_uas_agent_m0_byteenable;                                            // ssram0_uas_agent:m0_byteenable -> ssram0_uas_translator:uav_byteenable
	wire          ssram0_uas_agent_m0_read;                                                  // ssram0_uas_agent:m0_read -> ssram0_uas_translator:uav_read
	wire          ssram0_uas_agent_m0_readdatavalid;                                         // ssram0_uas_translator:uav_readdatavalid -> ssram0_uas_agent:m0_readdatavalid
	wire          ssram0_uas_agent_m0_lock;                                                  // ssram0_uas_agent:m0_lock -> ssram0_uas_translator:uav_lock
	wire   [31:0] ssram0_uas_agent_m0_writedata;                                             // ssram0_uas_agent:m0_writedata -> ssram0_uas_translator:uav_writedata
	wire          ssram0_uas_agent_m0_write;                                                 // ssram0_uas_agent:m0_write -> ssram0_uas_translator:uav_write
	wire    [2:0] ssram0_uas_agent_m0_burstcount;                                            // ssram0_uas_agent:m0_burstcount -> ssram0_uas_translator:uav_burstcount
	wire          ssram0_uas_agent_rf_source_valid;                                          // ssram0_uas_agent:rf_source_valid -> ssram0_uas_agent_rsp_fifo:in_valid
	wire  [113:0] ssram0_uas_agent_rf_source_data;                                           // ssram0_uas_agent:rf_source_data -> ssram0_uas_agent_rsp_fifo:in_data
	wire          ssram0_uas_agent_rf_source_ready;                                          // ssram0_uas_agent_rsp_fifo:in_ready -> ssram0_uas_agent:rf_source_ready
	wire          ssram0_uas_agent_rf_source_startofpacket;                                  // ssram0_uas_agent:rf_source_startofpacket -> ssram0_uas_agent_rsp_fifo:in_startofpacket
	wire          ssram0_uas_agent_rf_source_endofpacket;                                    // ssram0_uas_agent:rf_source_endofpacket -> ssram0_uas_agent_rsp_fifo:in_endofpacket
	wire          ssram0_uas_agent_rsp_fifo_out_valid;                                       // ssram0_uas_agent_rsp_fifo:out_valid -> ssram0_uas_agent:rf_sink_valid
	wire  [113:0] ssram0_uas_agent_rsp_fifo_out_data;                                        // ssram0_uas_agent_rsp_fifo:out_data -> ssram0_uas_agent:rf_sink_data
	wire          ssram0_uas_agent_rsp_fifo_out_ready;                                       // ssram0_uas_agent:rf_sink_ready -> ssram0_uas_agent_rsp_fifo:out_ready
	wire          ssram0_uas_agent_rsp_fifo_out_startofpacket;                               // ssram0_uas_agent_rsp_fifo:out_startofpacket -> ssram0_uas_agent:rf_sink_startofpacket
	wire          ssram0_uas_agent_rsp_fifo_out_endofpacket;                                 // ssram0_uas_agent_rsp_fifo:out_endofpacket -> ssram0_uas_agent:rf_sink_endofpacket
	wire          ssram0_uas_agent_rdata_fifo_src_valid;                                     // ssram0_uas_agent:rdata_fifo_src_valid -> ssram0_uas_agent_rdata_fifo:in_valid
	wire   [33:0] ssram0_uas_agent_rdata_fifo_src_data;                                      // ssram0_uas_agent:rdata_fifo_src_data -> ssram0_uas_agent_rdata_fifo:in_data
	wire          ssram0_uas_agent_rdata_fifo_src_ready;                                     // ssram0_uas_agent_rdata_fifo:in_ready -> ssram0_uas_agent:rdata_fifo_src_ready
	wire   [31:0] ssram1_uas_agent_m0_readdata;                                              // ssram1_uas_translator:uav_readdata -> ssram1_uas_agent:m0_readdata
	wire          ssram1_uas_agent_m0_waitrequest;                                           // ssram1_uas_translator:uav_waitrequest -> ssram1_uas_agent:m0_waitrequest
	wire          ssram1_uas_agent_m0_debugaccess;                                           // ssram1_uas_agent:m0_debugaccess -> ssram1_uas_translator:uav_debugaccess
	wire   [31:0] ssram1_uas_agent_m0_address;                                               // ssram1_uas_agent:m0_address -> ssram1_uas_translator:uav_address
	wire    [3:0] ssram1_uas_agent_m0_byteenable;                                            // ssram1_uas_agent:m0_byteenable -> ssram1_uas_translator:uav_byteenable
	wire          ssram1_uas_agent_m0_read;                                                  // ssram1_uas_agent:m0_read -> ssram1_uas_translator:uav_read
	wire          ssram1_uas_agent_m0_readdatavalid;                                         // ssram1_uas_translator:uav_readdatavalid -> ssram1_uas_agent:m0_readdatavalid
	wire          ssram1_uas_agent_m0_lock;                                                  // ssram1_uas_agent:m0_lock -> ssram1_uas_translator:uav_lock
	wire   [31:0] ssram1_uas_agent_m0_writedata;                                             // ssram1_uas_agent:m0_writedata -> ssram1_uas_translator:uav_writedata
	wire          ssram1_uas_agent_m0_write;                                                 // ssram1_uas_agent:m0_write -> ssram1_uas_translator:uav_write
	wire    [2:0] ssram1_uas_agent_m0_burstcount;                                            // ssram1_uas_agent:m0_burstcount -> ssram1_uas_translator:uav_burstcount
	wire          ssram1_uas_agent_rf_source_valid;                                          // ssram1_uas_agent:rf_source_valid -> ssram1_uas_agent_rsp_fifo:in_valid
	wire  [113:0] ssram1_uas_agent_rf_source_data;                                           // ssram1_uas_agent:rf_source_data -> ssram1_uas_agent_rsp_fifo:in_data
	wire          ssram1_uas_agent_rf_source_ready;                                          // ssram1_uas_agent_rsp_fifo:in_ready -> ssram1_uas_agent:rf_source_ready
	wire          ssram1_uas_agent_rf_source_startofpacket;                                  // ssram1_uas_agent:rf_source_startofpacket -> ssram1_uas_agent_rsp_fifo:in_startofpacket
	wire          ssram1_uas_agent_rf_source_endofpacket;                                    // ssram1_uas_agent:rf_source_endofpacket -> ssram1_uas_agent_rsp_fifo:in_endofpacket
	wire          ssram1_uas_agent_rsp_fifo_out_valid;                                       // ssram1_uas_agent_rsp_fifo:out_valid -> ssram1_uas_agent:rf_sink_valid
	wire  [113:0] ssram1_uas_agent_rsp_fifo_out_data;                                        // ssram1_uas_agent_rsp_fifo:out_data -> ssram1_uas_agent:rf_sink_data
	wire          ssram1_uas_agent_rsp_fifo_out_ready;                                       // ssram1_uas_agent:rf_sink_ready -> ssram1_uas_agent_rsp_fifo:out_ready
	wire          ssram1_uas_agent_rsp_fifo_out_startofpacket;                               // ssram1_uas_agent_rsp_fifo:out_startofpacket -> ssram1_uas_agent:rf_sink_startofpacket
	wire          ssram1_uas_agent_rsp_fifo_out_endofpacket;                                 // ssram1_uas_agent_rsp_fifo:out_endofpacket -> ssram1_uas_agent:rf_sink_endofpacket
	wire          ssram1_uas_agent_rdata_fifo_src_valid;                                     // ssram1_uas_agent:rdata_fifo_src_valid -> ssram1_uas_agent_rdata_fifo:in_valid
	wire   [33:0] ssram1_uas_agent_rdata_fifo_src_data;                                      // ssram1_uas_agent:rdata_fifo_src_data -> ssram1_uas_agent_rdata_fifo:in_data
	wire          ssram1_uas_agent_rdata_fifo_src_ready;                                     // ssram1_uas_agent_rdata_fifo:in_ready -> ssram1_uas_agent:rdata_fifo_src_ready
	wire   [63:0] pcie_ip_txs_agent_m0_readdata;                                             // pcie_ip_txs_translator:uav_readdata -> pcie_ip_txs_agent:m0_readdata
	wire          pcie_ip_txs_agent_m0_waitrequest;                                          // pcie_ip_txs_translator:uav_waitrequest -> pcie_ip_txs_agent:m0_waitrequest
	wire          pcie_ip_txs_agent_m0_debugaccess;                                          // pcie_ip_txs_agent:m0_debugaccess -> pcie_ip_txs_translator:uav_debugaccess
	wire   [31:0] pcie_ip_txs_agent_m0_address;                                              // pcie_ip_txs_agent:m0_address -> pcie_ip_txs_translator:uav_address
	wire    [7:0] pcie_ip_txs_agent_m0_byteenable;                                           // pcie_ip_txs_agent:m0_byteenable -> pcie_ip_txs_translator:uav_byteenable
	wire          pcie_ip_txs_agent_m0_read;                                                 // pcie_ip_txs_agent:m0_read -> pcie_ip_txs_translator:uav_read
	wire          pcie_ip_txs_agent_m0_readdatavalid;                                        // pcie_ip_txs_translator:uav_readdatavalid -> pcie_ip_txs_agent:m0_readdatavalid
	wire          pcie_ip_txs_agent_m0_lock;                                                 // pcie_ip_txs_agent:m0_lock -> pcie_ip_txs_translator:uav_lock
	wire   [63:0] pcie_ip_txs_agent_m0_writedata;                                            // pcie_ip_txs_agent:m0_writedata -> pcie_ip_txs_translator:uav_writedata
	wire          pcie_ip_txs_agent_m0_write;                                                // pcie_ip_txs_agent:m0_write -> pcie_ip_txs_translator:uav_write
	wire    [9:0] pcie_ip_txs_agent_m0_burstcount;                                           // pcie_ip_txs_agent:m0_burstcount -> pcie_ip_txs_translator:uav_burstcount
	wire          pcie_ip_txs_agent_rf_source_valid;                                         // pcie_ip_txs_agent:rf_source_valid -> pcie_ip_txs_agent_rsp_fifo:in_valid
	wire  [149:0] pcie_ip_txs_agent_rf_source_data;                                          // pcie_ip_txs_agent:rf_source_data -> pcie_ip_txs_agent_rsp_fifo:in_data
	wire          pcie_ip_txs_agent_rf_source_ready;                                         // pcie_ip_txs_agent_rsp_fifo:in_ready -> pcie_ip_txs_agent:rf_source_ready
	wire          pcie_ip_txs_agent_rf_source_startofpacket;                                 // pcie_ip_txs_agent:rf_source_startofpacket -> pcie_ip_txs_agent_rsp_fifo:in_startofpacket
	wire          pcie_ip_txs_agent_rf_source_endofpacket;                                   // pcie_ip_txs_agent:rf_source_endofpacket -> pcie_ip_txs_agent_rsp_fifo:in_endofpacket
	wire          pcie_ip_txs_agent_rsp_fifo_out_valid;                                      // pcie_ip_txs_agent_rsp_fifo:out_valid -> pcie_ip_txs_agent:rf_sink_valid
	wire  [149:0] pcie_ip_txs_agent_rsp_fifo_out_data;                                       // pcie_ip_txs_agent_rsp_fifo:out_data -> pcie_ip_txs_agent:rf_sink_data
	wire          pcie_ip_txs_agent_rsp_fifo_out_ready;                                      // pcie_ip_txs_agent:rf_sink_ready -> pcie_ip_txs_agent_rsp_fifo:out_ready
	wire          pcie_ip_txs_agent_rsp_fifo_out_startofpacket;                              // pcie_ip_txs_agent_rsp_fifo:out_startofpacket -> pcie_ip_txs_agent:rf_sink_startofpacket
	wire          pcie_ip_txs_agent_rsp_fifo_out_endofpacket;                                // pcie_ip_txs_agent_rsp_fifo:out_endofpacket -> pcie_ip_txs_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> pcie_ip_txs_agent:cp_valid
	wire  [148:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> pcie_ip_txs_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                     // pcie_ip_txs_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> pcie_ip_txs_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> pcie_ip_txs_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> pcie_ip_txs_agent:cp_endofpacket
	wire          pcie_ip_bar1_0_agent_cp_valid;                                             // pcie_ip_bar1_0_agent:cp_valid -> router:sink_valid
	wire  [148:0] pcie_ip_bar1_0_agent_cp_data;                                              // pcie_ip_bar1_0_agent:cp_data -> router:sink_data
	wire          pcie_ip_bar1_0_agent_cp_ready;                                             // router:sink_ready -> pcie_ip_bar1_0_agent:cp_ready
	wire          pcie_ip_bar1_0_agent_cp_startofpacket;                                     // pcie_ip_bar1_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pcie_ip_bar1_0_agent_cp_endofpacket;                                       // pcie_ip_bar1_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          sgdma_m_read_agent_cp_valid;                                               // sgdma_m_read_agent:cp_valid -> router_001:sink_valid
	wire  [148:0] sgdma_m_read_agent_cp_data;                                                // sgdma_m_read_agent:cp_data -> router_001:sink_data
	wire          sgdma_m_read_agent_cp_ready;                                               // router_001:sink_ready -> sgdma_m_read_agent:cp_ready
	wire          sgdma_m_read_agent_cp_startofpacket;                                       // sgdma_m_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          sgdma_m_read_agent_cp_endofpacket;                                         // sgdma_m_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_m_write_agent_cp_valid;                                              // sgdma_m_write_agent:cp_valid -> router_002:sink_valid
	wire  [148:0] sgdma_m_write_agent_cp_data;                                               // sgdma_m_write_agent:cp_data -> router_002:sink_data
	wire          sgdma_m_write_agent_cp_ready;                                              // router_002:sink_ready -> sgdma_m_write_agent:cp_ready
	wire          sgdma_m_write_agent_cp_startofpacket;                                      // sgdma_m_write_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sgdma_m_write_agent_cp_endofpacket;                                        // sgdma_m_write_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [148:0] router_002_src_data;                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sgdma_descriptor_read_agent_cp_valid;                                      // sgdma_descriptor_read_agent:cp_valid -> router_003:sink_valid
	wire  [112:0] sgdma_descriptor_read_agent_cp_data;                                       // sgdma_descriptor_read_agent:cp_data -> router_003:sink_data
	wire          sgdma_descriptor_read_agent_cp_ready;                                      // router_003:sink_ready -> sgdma_descriptor_read_agent:cp_ready
	wire          sgdma_descriptor_read_agent_cp_startofpacket;                              // sgdma_descriptor_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          sgdma_descriptor_read_agent_cp_endofpacket;                                // sgdma_descriptor_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [112:0] router_003_src_data;                                                       // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                      // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                    // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sgdma_descriptor_write_agent_cp_valid;                                     // sgdma_descriptor_write_agent:cp_valid -> router_004:sink_valid
	wire  [112:0] sgdma_descriptor_write_agent_cp_data;                                      // sgdma_descriptor_write_agent:cp_data -> router_004:sink_data
	wire          sgdma_descriptor_write_agent_cp_ready;                                     // router_004:sink_ready -> sgdma_descriptor_write_agent:cp_ready
	wire          sgdma_descriptor_write_agent_cp_startofpacket;                             // sgdma_descriptor_write_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          sgdma_descriptor_write_agent_cp_endofpacket;                               // sgdma_descriptor_write_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [112:0] router_004_src_data;                                                       // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                      // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                    // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                           // onchip_memory_s1_agent:rp_valid -> router_005:sink_valid
	wire  [148:0] onchip_memory_s1_agent_rp_data;                                            // onchip_memory_s1_agent:rp_data -> router_005:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                           // router_005:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                                   // onchip_memory_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                                     // onchip_memory_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux:sink_valid
	wire  [148:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                      // rsp_demux:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                     // led_s1_agent:rp_valid -> router_006:sink_valid
	wire  [112:0] led_s1_agent_rp_data;                                                      // led_s1_agent:rp_data -> router_006:sink_data
	wire          led_s1_agent_rp_ready;                                                     // router_006:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                             // led_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                               // led_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                      // rsp_demux_001:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          button_s1_agent_rp_valid;                                                  // button_s1_agent:rp_valid -> router_007:sink_valid
	wire  [112:0] button_s1_agent_rp_data;                                                   // button_s1_agent:rp_data -> router_007:sink_data
	wire          button_s1_agent_rp_ready;                                                  // router_007:sink_ready -> button_s1_agent:rp_ready
	wire          button_s1_agent_rp_startofpacket;                                          // button_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          button_s1_agent_rp_endofpacket;                                            // button_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [112:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                      // rsp_demux_002:sink_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ssram0_uas_agent_rp_valid;                                                 // ssram0_uas_agent:rp_valid -> router_008:sink_valid
	wire  [112:0] ssram0_uas_agent_rp_data;                                                  // ssram0_uas_agent:rp_data -> router_008:sink_data
	wire          ssram0_uas_agent_rp_ready;                                                 // router_008:sink_ready -> ssram0_uas_agent:rp_ready
	wire          ssram0_uas_agent_rp_startofpacket;                                         // ssram0_uas_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ssram0_uas_agent_rp_endofpacket;                                           // ssram0_uas_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [112:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                      // rsp_demux_003:sink_ready -> router_008:src_ready
	wire    [5:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          ssram1_uas_agent_rp_valid;                                                 // ssram1_uas_agent:rp_valid -> router_009:sink_valid
	wire  [112:0] ssram1_uas_agent_rp_data;                                                  // ssram1_uas_agent:rp_data -> router_009:sink_data
	wire          ssram1_uas_agent_rp_ready;                                                 // router_009:sink_ready -> ssram1_uas_agent:rp_ready
	wire          ssram1_uas_agent_rp_startofpacket;                                         // ssram1_uas_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ssram1_uas_agent_rp_endofpacket;                                           // ssram1_uas_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [112:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                      // rsp_demux_004:sink_ready -> router_009:src_ready
	wire    [5:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          pcie_ip_txs_agent_rp_valid;                                                // pcie_ip_txs_agent:rp_valid -> router_010:sink_valid
	wire  [148:0] pcie_ip_txs_agent_rp_data;                                                 // pcie_ip_txs_agent:rp_data -> router_010:sink_data
	wire          pcie_ip_txs_agent_rp_ready;                                                // router_010:sink_ready -> pcie_ip_txs_agent:rp_ready
	wire          pcie_ip_txs_agent_rp_startofpacket;                                        // pcie_ip_txs_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          pcie_ip_txs_agent_rp_endofpacket;                                          // pcie_ip_txs_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [148:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                      // rsp_demux_005:sink_ready -> router_010:src_ready
	wire    [5:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> pcie_ip_bar1_0_limiter:cmd_sink_valid
	wire  [148:0] router_src_data;                                                           // router:src_data -> pcie_ip_bar1_0_limiter:cmd_sink_data
	wire          router_src_ready;                                                          // pcie_ip_bar1_0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                        // router:src_channel -> pcie_ip_bar1_0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> pcie_ip_bar1_0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> pcie_ip_bar1_0_limiter:cmd_sink_endofpacket
	wire  [148:0] pcie_ip_bar1_0_limiter_cmd_src_data;                                       // pcie_ip_bar1_0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          pcie_ip_bar1_0_limiter_cmd_src_ready;                                      // cmd_demux:sink_ready -> pcie_ip_bar1_0_limiter:cmd_src_ready
	wire    [5:0] pcie_ip_bar1_0_limiter_cmd_src_channel;                                    // pcie_ip_bar1_0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pcie_ip_bar1_0_limiter_cmd_src_startofpacket;                              // pcie_ip_bar1_0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          pcie_ip_bar1_0_limiter_cmd_src_endofpacket;                                // pcie_ip_bar1_0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> pcie_ip_bar1_0_limiter:rsp_sink_valid
	wire  [148:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> pcie_ip_bar1_0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                         // pcie_ip_bar1_0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> pcie_ip_bar1_0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> pcie_ip_bar1_0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> pcie_ip_bar1_0_limiter:rsp_sink_endofpacket
	wire          pcie_ip_bar1_0_limiter_rsp_src_valid;                                      // pcie_ip_bar1_0_limiter:rsp_src_valid -> pcie_ip_bar1_0_agent:rp_valid
	wire  [148:0] pcie_ip_bar1_0_limiter_rsp_src_data;                                       // pcie_ip_bar1_0_limiter:rsp_src_data -> pcie_ip_bar1_0_agent:rp_data
	wire          pcie_ip_bar1_0_limiter_rsp_src_ready;                                      // pcie_ip_bar1_0_agent:rp_ready -> pcie_ip_bar1_0_limiter:rsp_src_ready
	wire    [5:0] pcie_ip_bar1_0_limiter_rsp_src_channel;                                    // pcie_ip_bar1_0_limiter:rsp_src_channel -> pcie_ip_bar1_0_agent:rp_channel
	wire          pcie_ip_bar1_0_limiter_rsp_src_startofpacket;                              // pcie_ip_bar1_0_limiter:rsp_src_startofpacket -> pcie_ip_bar1_0_agent:rp_startofpacket
	wire          pcie_ip_bar1_0_limiter_rsp_src_endofpacket;                                // pcie_ip_bar1_0_limiter:rsp_src_endofpacket -> pcie_ip_bar1_0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> sgdma_m_read_limiter:cmd_sink_valid
	wire  [148:0] router_001_src_data;                                                       // router_001:src_data -> sgdma_m_read_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                      // sgdma_m_read_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                    // router_001:src_channel -> sgdma_m_read_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> sgdma_m_read_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> sgdma_m_read_limiter:cmd_sink_endofpacket
	wire  [148:0] sgdma_m_read_limiter_cmd_src_data;                                         // sgdma_m_read_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          sgdma_m_read_limiter_cmd_src_ready;                                        // cmd_demux_001:sink_ready -> sgdma_m_read_limiter:cmd_src_ready
	wire    [5:0] sgdma_m_read_limiter_cmd_src_channel;                                      // sgdma_m_read_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          sgdma_m_read_limiter_cmd_src_startofpacket;                                // sgdma_m_read_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          sgdma_m_read_limiter_cmd_src_endofpacket;                                  // sgdma_m_read_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> sgdma_m_read_limiter:rsp_sink_valid
	wire  [148:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> sgdma_m_read_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                     // sgdma_m_read_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> sgdma_m_read_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> sgdma_m_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> sgdma_m_read_limiter:rsp_sink_endofpacket
	wire          sgdma_m_read_limiter_rsp_src_valid;                                        // sgdma_m_read_limiter:rsp_src_valid -> sgdma_m_read_agent:rp_valid
	wire  [148:0] sgdma_m_read_limiter_rsp_src_data;                                         // sgdma_m_read_limiter:rsp_src_data -> sgdma_m_read_agent:rp_data
	wire          sgdma_m_read_limiter_rsp_src_ready;                                        // sgdma_m_read_agent:rp_ready -> sgdma_m_read_limiter:rsp_src_ready
	wire    [5:0] sgdma_m_read_limiter_rsp_src_channel;                                      // sgdma_m_read_limiter:rsp_src_channel -> sgdma_m_read_agent:rp_channel
	wire          sgdma_m_read_limiter_rsp_src_startofpacket;                                // sgdma_m_read_limiter:rsp_src_startofpacket -> sgdma_m_read_agent:rp_startofpacket
	wire          sgdma_m_read_limiter_rsp_src_endofpacket;                                  // sgdma_m_read_limiter:rsp_src_endofpacket -> sgdma_m_read_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> onchip_memory_s1_burst_adapter:sink0_valid
	wire  [148:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> onchip_memory_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                         // onchip_memory_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> onchip_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> onchip_memory_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> onchip_memory_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory_s1_burst_adapter_source0_valid;                              // onchip_memory_s1_burst_adapter:source0_valid -> onchip_memory_s1_agent:cp_valid
	wire  [148:0] onchip_memory_s1_burst_adapter_source0_data;                               // onchip_memory_s1_burst_adapter:source0_data -> onchip_memory_s1_agent:cp_data
	wire          onchip_memory_s1_burst_adapter_source0_ready;                              // onchip_memory_s1_agent:cp_ready -> onchip_memory_s1_burst_adapter:source0_ready
	wire    [5:0] onchip_memory_s1_burst_adapter_source0_channel;                            // onchip_memory_s1_burst_adapter:source0_channel -> onchip_memory_s1_agent:cp_channel
	wire          onchip_memory_s1_burst_adapter_source0_startofpacket;                      // onchip_memory_s1_burst_adapter:source0_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_burst_adapter_source0_endofpacket;                        // onchip_memory_s1_burst_adapter:source0_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> led_s1_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> led_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                     // led_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> led_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> led_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> led_s1_burst_adapter:sink0_endofpacket
	wire          led_s1_burst_adapter_source0_valid;                                        // led_s1_burst_adapter:source0_valid -> led_s1_agent:cp_valid
	wire  [112:0] led_s1_burst_adapter_source0_data;                                         // led_s1_burst_adapter:source0_data -> led_s1_agent:cp_data
	wire          led_s1_burst_adapter_source0_ready;                                        // led_s1_agent:cp_ready -> led_s1_burst_adapter:source0_ready
	wire    [5:0] led_s1_burst_adapter_source0_channel;                                      // led_s1_burst_adapter:source0_channel -> led_s1_agent:cp_channel
	wire          led_s1_burst_adapter_source0_startofpacket;                                // led_s1_burst_adapter:source0_startofpacket -> led_s1_agent:cp_startofpacket
	wire          led_s1_burst_adapter_source0_endofpacket;                                  // led_s1_burst_adapter:source0_endofpacket -> led_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> button_s1_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> button_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                     // button_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> button_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> button_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> button_s1_burst_adapter:sink0_endofpacket
	wire          button_s1_burst_adapter_source0_valid;                                     // button_s1_burst_adapter:source0_valid -> button_s1_agent:cp_valid
	wire  [112:0] button_s1_burst_adapter_source0_data;                                      // button_s1_burst_adapter:source0_data -> button_s1_agent:cp_data
	wire          button_s1_burst_adapter_source0_ready;                                     // button_s1_agent:cp_ready -> button_s1_burst_adapter:source0_ready
	wire    [5:0] button_s1_burst_adapter_source0_channel;                                   // button_s1_burst_adapter:source0_channel -> button_s1_agent:cp_channel
	wire          button_s1_burst_adapter_source0_startofpacket;                             // button_s1_burst_adapter:source0_startofpacket -> button_s1_agent:cp_startofpacket
	wire          button_s1_burst_adapter_source0_endofpacket;                               // button_s1_burst_adapter:source0_endofpacket -> button_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> ssram0_uas_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> ssram0_uas_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                     // ssram0_uas_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> ssram0_uas_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> ssram0_uas_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> ssram0_uas_burst_adapter:sink0_endofpacket
	wire          ssram0_uas_burst_adapter_source0_valid;                                    // ssram0_uas_burst_adapter:source0_valid -> ssram0_uas_agent:cp_valid
	wire  [112:0] ssram0_uas_burst_adapter_source0_data;                                     // ssram0_uas_burst_adapter:source0_data -> ssram0_uas_agent:cp_data
	wire          ssram0_uas_burst_adapter_source0_ready;                                    // ssram0_uas_agent:cp_ready -> ssram0_uas_burst_adapter:source0_ready
	wire    [5:0] ssram0_uas_burst_adapter_source0_channel;                                  // ssram0_uas_burst_adapter:source0_channel -> ssram0_uas_agent:cp_channel
	wire          ssram0_uas_burst_adapter_source0_startofpacket;                            // ssram0_uas_burst_adapter:source0_startofpacket -> ssram0_uas_agent:cp_startofpacket
	wire          ssram0_uas_burst_adapter_source0_endofpacket;                              // ssram0_uas_burst_adapter:source0_endofpacket -> ssram0_uas_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> ssram1_uas_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> ssram1_uas_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                     // ssram1_uas_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> ssram1_uas_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> ssram1_uas_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> ssram1_uas_burst_adapter:sink0_endofpacket
	wire          ssram1_uas_burst_adapter_source0_valid;                                    // ssram1_uas_burst_adapter:source0_valid -> ssram1_uas_agent:cp_valid
	wire  [112:0] ssram1_uas_burst_adapter_source0_data;                                     // ssram1_uas_burst_adapter:source0_data -> ssram1_uas_agent:cp_data
	wire          ssram1_uas_burst_adapter_source0_ready;                                    // ssram1_uas_agent:cp_ready -> ssram1_uas_burst_adapter:source0_ready
	wire    [5:0] ssram1_uas_burst_adapter_source0_channel;                                  // ssram1_uas_burst_adapter:source0_channel -> ssram1_uas_agent:cp_channel
	wire          ssram1_uas_burst_adapter_source0_startofpacket;                            // ssram1_uas_burst_adapter:source0_startofpacket -> ssram1_uas_agent:cp_startofpacket
	wire          ssram1_uas_burst_adapter_source0_endofpacket;                              // ssram1_uas_burst_adapter:source0_endofpacket -> ssram1_uas_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [148:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [148:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> cmd_mux_005:sink0_valid
	wire  [148:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src3_ready;                                                  // cmd_mux_005:sink0_ready -> cmd_demux_001:src3_ready
	wire    [5:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [148:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                  // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [5:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                  // cmd_demux_002:src3_valid -> cmd_mux_005:sink1_valid
	wire  [148:0] cmd_demux_002_src3_data;                                                   // cmd_demux_002:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_002_src3_ready;                                                  // cmd_mux_005:sink1_ready -> cmd_demux_002:src3_ready
	wire    [5:0] cmd_demux_002_src3_channel;                                                // cmd_demux_002:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_002_src3_startofpacket;                                          // cmd_demux_002:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                            // cmd_demux_002:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [148:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [148:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [5:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                      // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [148:0] rsp_demux_src2_data;                                                       // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                      // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [5:0] rsp_demux_src2_channel;                                                    // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                              // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux_001:sink3_valid
	wire  [148:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_005_src0_ready;                                                  // rsp_mux_001:sink3_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_005_src1_valid;                                                  // rsp_demux_005:src1_valid -> rsp_mux_002:sink3_valid
	wire  [148:0] rsp_demux_005_src1_data;                                                   // rsp_demux_005:src1_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_005_src1_ready;                                                  // rsp_mux_002:sink3_ready -> rsp_demux_005:src1_ready
	wire    [5:0] rsp_demux_005_src1_channel;                                                // rsp_demux_005:src1_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                      // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_endofpacket
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid;                      // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data;                       // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready;                      // cmd_mux_001:sink0_ready -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_ready
	wire    [5:0] pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel;                    // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket;              // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket;                // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                      // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_endofpacket
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid;                   // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [112:0] pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data;                    // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready;                   // cmd_mux_002:sink0_ready -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_ready
	wire    [5:0] pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel;                 // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket;           // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket;             // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                      // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:in_endofpacket
	wire          pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_valid;                  // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [112:0] pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_data;                   // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_ready;                  // cmd_mux_003:sink0_ready -> pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_ready
	wire    [5:0] pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_channel;                // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_startofpacket;          // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_endofpacket;            // pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                      // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:in_endofpacket
	wire          pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_valid;                  // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire  [112:0] pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_data;                   // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_ready;                  // cmd_mux_004:sink0_ready -> pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_ready
	wire    [5:0] pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_channel;                // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_startofpacket;          // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_endofpacket;            // pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                  // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:in_endofpacket
	wire          sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_valid;                    // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_valid -> cmd_mux_003:sink1_valid
	wire  [112:0] sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_data;                     // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_data -> cmd_mux_003:sink1_data
	wire          sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_ready;                    // cmd_mux_003:sink1_ready -> sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_channel;                  // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_channel -> cmd_mux_003:sink1_channel
	wire          sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_startofpacket;            // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_endofpacket;              // sgdma_m_read_to_ssram0_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_data
	wire          cmd_demux_001_src2_ready;                                                  // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:in_endofpacket
	wire          sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_valid;                    // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_valid -> cmd_mux_004:sink1_valid
	wire  [112:0] sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_data;                     // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_data -> cmd_mux_004:sink1_data
	wire          sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_ready;                    // cmd_mux_004:sink1_ready -> sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_channel;                  // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_channel -> cmd_mux_004:sink1_channel
	wire          sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_startofpacket;            // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_endofpacket;              // sgdma_m_read_to_ssram1_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                  // cmd_demux_002:src1_valid -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_002_src1_data;                                                   // cmd_demux_002:src1_data -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_data
	wire          cmd_demux_002_src1_ready;                                                  // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire    [5:0] cmd_demux_002_src1_channel;                                                // cmd_demux_002:src1_channel -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                          // cmd_demux_002:src1_startofpacket -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                            // cmd_demux_002:src1_endofpacket -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:in_endofpacket
	wire          sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_valid;                   // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_valid -> cmd_mux_003:sink2_valid
	wire  [112:0] sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_data;                    // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_data -> cmd_mux_003:sink2_data
	wire          sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_ready;                   // cmd_mux_003:sink2_ready -> sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_channel;                 // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_channel -> cmd_mux_003:sink2_channel
	wire          sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_startofpacket;           // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_endofpacket;             // sgdma_m_write_to_ssram0_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                  // cmd_demux_002:src2_valid -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_valid
	wire  [148:0] cmd_demux_002_src2_data;                                                   // cmd_demux_002:src2_data -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_data
	wire          cmd_demux_002_src2_ready;                                                  // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_ready -> cmd_demux_002:src2_ready
	wire    [5:0] cmd_demux_002_src2_channel;                                                // cmd_demux_002:src2_channel -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                          // cmd_demux_002:src2_startofpacket -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                            // cmd_demux_002:src2_endofpacket -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:in_endofpacket
	wire          sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_valid;                   // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_valid -> cmd_mux_004:sink2_valid
	wire  [112:0] sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_data;                    // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_data -> cmd_mux_004:sink2_data
	wire          sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_ready;                   // cmd_mux_004:sink2_ready -> sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_channel;                 // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_channel -> cmd_mux_004:sink2_channel
	wire          sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_startofpacket;           // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_endofpacket;             // sgdma_m_write_to_ssram1_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                  // cmd_demux_003:src0_valid -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_003_src0_data;                                                   // cmd_demux_003:src0_data -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                  // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire    [5:0] cmd_demux_003_src0_channel;                                                // cmd_demux_003:src0_channel -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                          // cmd_demux_003:src0_startofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                            // cmd_demux_003:src0_endofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid;          // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux_005:sink2_valid
	wire  [148:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data;           // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux_005:sink2_data
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready;          // cmd_mux_005:sink2_ready -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel;        // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux_005:sink2_channel
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket;  // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;    // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src0_valid;                                                  // cmd_demux_004:src0_valid -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_004_src0_data;                                                   // cmd_demux_004:src0_data -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                  // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire    [5:0] cmd_demux_004_src0_channel;                                                // cmd_demux_004:src0_channel -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                          // cmd_demux_004:src0_startofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                            // cmd_demux_004:src0_endofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid;         // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux_005:sink3_valid
	wire  [148:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data;          // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux_005:sink3_data
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready;         // cmd_mux_005:sink3_ready -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire    [5:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel;       // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux_005:sink3_channel
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket; // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;   // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                  // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                      // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [148:0] led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                       // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                      // rsp_mux:sink1_ready -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire    [5:0] led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                    // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;              // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;                // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                  // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                   // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire  [148:0] button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                    // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                   // rsp_mux:sink2_ready -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire    [5:0] button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                 // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;           // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;             // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                  // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                  // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [148:0] ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                   // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                  // rsp_mux:sink3_ready -> ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire    [5:0] ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;          // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;            // ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                  // rsp_demux_003:src1_valid -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_003_src1_data;                                                   // rsp_demux_003:src1_data -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_data
	wire          rsp_demux_003_src1_ready;                                                  // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_003:src1_ready
	wire    [5:0] rsp_demux_003_src1_channel;                                                // rsp_demux_003:src1_channel -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                          // rsp_demux_003:src1_startofpacket -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                            // rsp_demux_003:src1_endofpacket -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_valid;                    // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [148:0] ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_data;                     // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_ready;                    // rsp_mux_001:sink1_ready -> ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire    [5:0] ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_channel;                  // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;            // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;              // ssram0_uas_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                  // rsp_demux_003:src2_valid -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_003_src2_data;                                                   // rsp_demux_003:src2_data -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_data
	wire          rsp_demux_003_src2_ready;                                                  // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_003:src2_ready
	wire    [5:0] rsp_demux_003_src2_channel;                                                // rsp_demux_003:src2_channel -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src2_startofpacket;                                          // rsp_demux_003:src2_startofpacket -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                            // rsp_demux_003:src2_endofpacket -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_valid;                   // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink1_valid
	wire  [148:0] ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_data;                    // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink1_data
	wire          ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_ready;                   // rsp_mux_002:sink1_ready -> ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire    [5:0] ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_channel;                 // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink1_channel
	wire          ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;           // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;             // ssram0_uas_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                  // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                  // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [148:0] ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                   // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                  // rsp_mux:sink4_ready -> ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire    [5:0] ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;          // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;            // ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                  // rsp_demux_004:src1_valid -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_004_src1_data;                                                   // rsp_demux_004:src1_data -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_data
	wire          rsp_demux_004_src1_ready;                                                  // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_004:src1_ready
	wire    [5:0] rsp_demux_004_src1_channel;                                                // rsp_demux_004:src1_channel -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                          // rsp_demux_004:src1_startofpacket -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                            // rsp_demux_004:src1_endofpacket -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_valid;                    // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink2_valid
	wire  [148:0] ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_data;                     // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink2_data
	wire          ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_ready;                    // rsp_mux_001:sink2_ready -> ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire    [5:0] ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_channel;                  // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink2_channel
	wire          ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;            // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;              // ssram1_uas_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                  // rsp_demux_004:src2_valid -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_004_src2_data;                                                   // rsp_demux_004:src2_data -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_data
	wire          rsp_demux_004_src2_ready;                                                  // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_004:src2_ready
	wire    [5:0] rsp_demux_004_src2_channel;                                                // rsp_demux_004:src2_channel -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                          // rsp_demux_004:src2_startofpacket -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                            // rsp_demux_004:src2_endofpacket -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_valid;                   // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink2_valid
	wire  [148:0] ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_data;                    // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink2_data
	wire          ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_ready;                   // rsp_mux_002:sink2_ready -> ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire    [5:0] ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_channel;                 // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink2_channel
	wire          ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;           // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;             // ssram1_uas_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_005_src2_valid;                                                  // rsp_demux_005:src2_valid -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_valid
	wire  [148:0] rsp_demux_005_src2_data;                                                   // rsp_demux_005:src2_data -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_data
	wire          rsp_demux_005_src2_ready;                                                  // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_ready -> rsp_demux_005:src2_ready
	wire    [5:0] rsp_demux_005_src2_channel;                                                // rsp_demux_005:src2_channel -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                          // rsp_demux_005:src2_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                            // rsp_demux_005:src2_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid;          // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [112:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data;           // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready;          // rsp_mux_003:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_ready
	wire    [5:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel;        // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket;  // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket;    // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_005_src3_valid;                                                  // rsp_demux_005:src3_valid -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_valid
	wire  [148:0] rsp_demux_005_src3_data;                                                   // rsp_demux_005:src3_data -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_data
	wire          rsp_demux_005_src3_ready;                                                  // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_ready -> rsp_demux_005:src3_ready
	wire    [5:0] rsp_demux_005_src3_channel;                                                // rsp_demux_005:src3_channel -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src3_startofpacket;                                          // rsp_demux_005:src3_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                            // rsp_demux_005:src3_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid;         // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire  [112:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data;          // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready;         // rsp_mux_004:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_ready
	wire    [5:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel;       // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket; // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket;   // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire    [5:0] pcie_ip_bar1_0_limiter_cmd_valid_data;                                     // pcie_ip_bar1_0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [5:0] sgdma_m_read_limiter_cmd_valid_data;                                       // sgdma_m_read_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                               // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                               // avalon_st_adapter:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                             // avalon_st_adapter:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                              // avalon_st_adapter:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                             // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                             // avalon_st_adapter:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_src_valid;                                         // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                          // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_001:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                         // avalon_st_adapter_001:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                          // avalon_st_adapter_001:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                         // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                         // avalon_st_adapter_001:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          button_s1_agent_rdata_fifo_src_valid;                                      // button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] button_s1_agent_rdata_fifo_src_data;                                       // button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          button_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_002:in_0_ready -> button_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                         // avalon_st_adapter_002:out_0_valid -> button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                          // avalon_st_adapter_002:out_0_data -> button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                         // button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                         // avalon_st_adapter_002:out_0_error -> button_s1_agent:rdata_fifo_sink_error
	wire          ssram0_uas_agent_rdata_fifo_out_valid;                                     // ssram0_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] ssram0_uas_agent_rdata_fifo_out_data;                                      // ssram0_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          ssram0_uas_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_003:in_0_ready -> ssram0_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                         // avalon_st_adapter_003:out_0_valid -> ssram0_uas_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                          // avalon_st_adapter_003:out_0_data -> ssram0_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                         // ssram0_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                         // avalon_st_adapter_003:out_0_error -> ssram0_uas_agent:rdata_fifo_sink_error
	wire          ssram1_uas_agent_rdata_fifo_out_valid;                                     // ssram1_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] ssram1_uas_agent_rdata_fifo_out_data;                                      // ssram1_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          ssram1_uas_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_004:in_0_ready -> ssram1_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                         // avalon_st_adapter_004:out_0_valid -> ssram1_uas_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                          // avalon_st_adapter_004:out_0_data -> ssram1_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                         // ssram1_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                         // avalon_st_adapter_004:out_0_error -> ssram1_uas_agent:rdata_fifo_sink_error
	wire          pcie_ip_txs_agent_rdata_fifo_src_valid;                                    // pcie_ip_txs_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [65:0] pcie_ip_txs_agent_rdata_fifo_src_data;                                     // pcie_ip_txs_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          pcie_ip_txs_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_005:in_0_ready -> pcie_ip_txs_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                         // avalon_st_adapter_005:out_0_valid -> pcie_ip_txs_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_005_out_0_data;                                          // avalon_st_adapter_005:out_0_data -> pcie_ip_txs_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                         // pcie_ip_txs_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                         // avalon_st_adapter_005:out_0_error -> pcie_ip_txs_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_ip_bar1_0_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                         //                       clk.clk
		.reset                  (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address            (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pcie_ip_bar1_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pcie_ip_bar1_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pcie_ip_bar1_0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pcie_ip_bar1_0_byteenable),                                         //                          .byteenable
		.av_read                (pcie_ip_bar1_0_read),                                               //                          .read
		.av_readdata            (pcie_ip_bar1_0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pcie_ip_bar1_0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pcie_ip_bar1_0_write),                                              //                          .write
		.av_writedata           (pcie_ip_bar1_0_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_read_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                            //                       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (sgdma_m_read_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_m_read_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read               (sgdma_m_read_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write              (sgdma_m_read_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest        (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid      (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable         (sgdma_m_read_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata           (sgdma_m_read_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata          (sgdma_m_read_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock               (sgdma_m_read_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess        (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.av_address             (sgdma_m_read_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_m_read_waitrequest),                                             //                          .waitrequest
		.av_read                (sgdma_m_read_read),                                                    //                          .read
		.av_readdata            (sgdma_m_read_readdata),                                                //                          .readdata
		.av_readdatavalid       (sgdma_m_read_readdatavalid),                                           //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_byteenable          (8'b11111111),                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_write_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                        //                       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (sgdma_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (sgdma_m_write_byteenable),                                         //                          .byteenable
		.av_write               (sgdma_m_write_write),                                              //                          .write
		.av_writedata           (sgdma_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                             //               (terminated)
		.av_read                (1'b0),                                                             //               (terminated)
		.av_readdata            (),                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                             //               (terminated)
		.uav_clken              (),                                                                 //               (terminated)
		.av_clken               (1'b1),                                                             //               (terminated)
		.uav_response           (2'b00),                                                            //               (terminated)
		.av_response            (),                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_read_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                                //                       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_descriptor_read_read),                                               //                          .read
		.av_readdata            (sgdma_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_write               (1'b0),                                                                     //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_write_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                                 //                       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (sgdma_descriptor_write_write),                                              //                          .write
		.av_writedata           (sgdma_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_read                (1'b0),                                                                      //               (terminated)
		.av_readdata            (),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                  //                         .write
		.av_readdata            (onchip_memory_s1_readdata),               //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),              //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),             //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),             //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                  //                         .clken
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                    //                         .read
		.uav_write              (led_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (led_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                            //                         .write
		.av_readdata            (led_s1_readdata),                         //                         .readdata
		.av_writedata           (led_s1_writedata),                        //                         .writedata
		.av_chipselect          (led_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_s1_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (button_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (button_s1_agent_m0_read),                 //                         .read
		.uav_write              (button_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (button_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (button_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (button_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (button_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (button_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (button_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (button_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (button_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (button_s1_write),                         //                         .write
		.av_readdata            (button_s1_readdata),                      //                         .readdata
		.av_writedata           (button_s1_writedata),                     //                         .writedata
		.av_chipselect          (button_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ssram0_uas_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ssram0_uas_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (ssram0_uas_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (ssram0_uas_agent_m0_read),                //                         .read
		.uav_write              (ssram0_uas_agent_m0_write),               //                         .write
		.uav_waitrequest        (ssram0_uas_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (ssram0_uas_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (ssram0_uas_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (ssram0_uas_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (ssram0_uas_agent_m0_writedata),           //                         .writedata
		.uav_lock               (ssram0_uas_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (ssram0_uas_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ssram0_uas_address),                      //      avalon_anti_slave_0.address
		.av_write               (ssram0_uas_write),                        //                         .write
		.av_read                (ssram0_uas_read),                         //                         .read
		.av_readdata            (ssram0_uas_readdata),                     //                         .readdata
		.av_writedata           (ssram0_uas_writedata),                    //                         .writedata
		.av_burstcount          (ssram0_uas_burstcount),                   //                         .burstcount
		.av_byteenable          (ssram0_uas_byteenable),                   //                         .byteenable
		.av_readdatavalid       (ssram0_uas_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (ssram0_uas_waitrequest),                  //                         .waitrequest
		.av_lock                (ssram0_uas_lock),                         //                         .lock
		.av_debugaccess         (ssram0_uas_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ssram1_uas_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ssram1_uas_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (ssram1_uas_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (ssram1_uas_agent_m0_read),                //                         .read
		.uav_write              (ssram1_uas_agent_m0_write),               //                         .write
		.uav_waitrequest        (ssram1_uas_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (ssram1_uas_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (ssram1_uas_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (ssram1_uas_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (ssram1_uas_agent_m0_writedata),           //                         .writedata
		.uav_lock               (ssram1_uas_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (ssram1_uas_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ssram1_uas_address),                      //      avalon_anti_slave_0.address
		.av_write               (ssram1_uas_write),                        //                         .write
		.av_read                (ssram1_uas_read),                         //                         .read
		.av_readdata            (ssram1_uas_readdata),                     //                         .readdata
		.av_writedata           (ssram1_uas_writedata),                    //                         .writedata
		.av_burstcount          (ssram1_uas_burstcount),                   //                         .burstcount
		.av_byteenable          (ssram1_uas_byteenable),                   //                         .byteenable
		.av_readdatavalid       (ssram1_uas_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (ssram1_uas_waitrequest),                  //                         .waitrequest
		.av_lock                (ssram1_uas_lock),                         //                         .lock
		.av_debugaccess         (ssram1_uas_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_ip_txs_translator (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                   //                      clk.clk
		.reset                  (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pcie_ip_txs_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (pcie_ip_txs_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (pcie_ip_txs_agent_m0_read),                                   //                         .read
		.uav_write              (pcie_ip_txs_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (pcie_ip_txs_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (pcie_ip_txs_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (pcie_ip_txs_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (pcie_ip_txs_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (pcie_ip_txs_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (pcie_ip_txs_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (pcie_ip_txs_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (pcie_ip_txs_address),                                         //      avalon_anti_slave_0.address
		.av_write               (pcie_ip_txs_write),                                           //                         .write
		.av_read                (pcie_ip_txs_read),                                            //                         .read
		.av_readdata            (pcie_ip_txs_readdata),                                        //                         .readdata
		.av_writedata           (pcie_ip_txs_writedata),                                       //                         .writedata
		.av_burstcount          (pcie_ip_txs_burstcount),                                      //                         .burstcount
		.av_byteenable          (pcie_ip_txs_byteenable),                                      //                         .byteenable
		.av_readdatavalid       (pcie_ip_txs_readdatavalid),                                   //                         .readdatavalid
		.av_waitrequest         (pcie_ip_txs_waitrequest),                                     //                         .waitrequest
		.av_chipselect          (pcie_ip_txs_chipselect),                                      //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_bar1_0_agent (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                         //       clk.clk
		.reset                 (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address            (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pcie_ip_bar1_0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pcie_ip_bar1_0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pcie_ip_bar1_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pcie_ip_bar1_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pcie_ip_bar1_0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pcie_ip_bar1_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pcie_ip_bar1_0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pcie_ip_bar1_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pcie_ip_bar1_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pcie_ip_bar1_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pcie_ip_bar1_0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_read_agent (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sgdma_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (sgdma_m_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (sgdma_m_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (sgdma_m_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (sgdma_m_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (sgdma_m_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (sgdma_m_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_write_agent (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (sgdma_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                            //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                             //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                          //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                            //          .ready
		.av_response           (),                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_read_agent (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                    //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_write_agent (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (149),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                            //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (150),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                         //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                  //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),          //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                     //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (button_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),             //                .error
		.rdata_fifo_src_ready    (button_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ssram0_uas_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                      //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ssram0_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ssram0_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ssram0_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ssram0_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ssram0_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (ssram0_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ssram0_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ssram0_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (ssram0_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ssram0_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (ssram0_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (ssram0_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ssram0_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (ssram0_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (ssram0_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (ssram0_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ssram0_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ssram0_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ssram0_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ssram0_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ssram0_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ssram0_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ssram0_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ssram0_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ssram0_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ssram0_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ssram0_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ssram0_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ssram0_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ssram0_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ssram0_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ssram0_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ssram0_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ssram0_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ssram0_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (6),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram0_uas_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                   //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (ssram0_uas_agent_rf_source_data),             //        in.data
		.in_valid          (ssram0_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (ssram0_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ssram0_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ssram0_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ssram0_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ssram0_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ssram0_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ssram0_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ssram0_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram0_uas_agent_rdata_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ssram0_uas_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (ssram0_uas_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (ssram0_uas_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (ssram0_uas_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (ssram0_uas_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (ssram0_uas_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ssram1_uas_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                      //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ssram1_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ssram1_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ssram1_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ssram1_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ssram1_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (ssram1_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ssram1_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ssram1_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (ssram1_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ssram1_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (ssram1_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (ssram1_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ssram1_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (ssram1_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (ssram1_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (ssram1_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ssram1_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ssram1_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ssram1_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ssram1_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ssram1_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ssram1_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ssram1_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ssram1_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ssram1_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ssram1_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ssram1_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ssram1_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ssram1_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ssram1_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ssram1_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ssram1_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ssram1_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ssram1_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ssram1_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (6),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram1_uas_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                   //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (ssram1_uas_agent_rf_source_data),             //        in.data
		.in_valid          (ssram1_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (ssram1_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ssram1_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ssram1_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ssram1_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ssram1_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ssram1_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ssram1_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ssram1_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram1_uas_agent_rdata_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ssram1_uas_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (ssram1_uas_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (ssram1_uas_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (ssram1_uas_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (ssram1_uas_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (ssram1_uas_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (149),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pcie_ip_txs_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                   //             clk.clk
		.reset                   (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcie_ip_txs_agent_m0_address),                                //              m0.address
		.m0_burstcount           (pcie_ip_txs_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (pcie_ip_txs_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (pcie_ip_txs_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (pcie_ip_txs_agent_m0_lock),                                   //                .lock
		.m0_readdata             (pcie_ip_txs_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (pcie_ip_txs_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (pcie_ip_txs_agent_m0_read),                                   //                .read
		.m0_waitrequest          (pcie_ip_txs_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (pcie_ip_txs_agent_m0_writedata),                              //                .writedata
		.m0_write                (pcie_ip_txs_agent_m0_write),                                  //                .write
		.rp_endofpacket          (pcie_ip_txs_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (pcie_ip_txs_agent_rp_ready),                                  //                .ready
		.rp_valid                (pcie_ip_txs_agent_rp_valid),                                  //                .valid
		.rp_data                 (pcie_ip_txs_agent_rp_data),                                   //                .data
		.rp_startofpacket        (pcie_ip_txs_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                     //                .channel
		.rf_sink_ready           (pcie_ip_txs_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (pcie_ip_txs_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (pcie_ip_txs_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (pcie_ip_txs_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (pcie_ip_txs_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (pcie_ip_txs_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (pcie_ip_txs_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (pcie_ip_txs_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pcie_ip_txs_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_ip_txs_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (pcie_ip_txs_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (150),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ip_txs_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset             (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ip_txs_agent_rf_source_data),                            //        in.data
		.in_valid          (pcie_ip_txs_agent_rf_source_valid),                           //          .valid
		.in_ready          (pcie_ip_txs_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (pcie_ip_txs_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (pcie_ip_txs_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (pcie_ip_txs_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (pcie_ip_txs_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (pcie_ip_txs_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	de2i_150_qsys_mm_interconnect_0_router router (
		.sink_ready         (pcie_ip_bar1_0_agent_cp_ready),                               //      sink.ready
		.sink_valid         (pcie_ip_bar1_0_agent_cp_valid),                               //          .valid
		.sink_data          (pcie_ip_bar1_0_agent_cp_data),                                //          .data
		.sink_startofpacket (pcie_ip_bar1_0_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_ip_bar1_0_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                            //       src.ready
		.src_valid          (router_src_valid),                                            //          .valid
		.src_data           (router_src_data),                                             //          .data
		.src_channel        (router_src_channel),                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sgdma_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (sgdma_m_write_agent_cp_ready),            //      sink.ready
		.sink_valid         (sgdma_m_write_agent_cp_valid),            //          .valid
		.sink_data          (sgdma_m_write_agent_cp_data),             //          .data
		.sink_startofpacket (sgdma_m_write_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sgdma_m_write_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sgdma_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                    //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sgdma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (led_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                   //          .valid
		.sink_data          (led_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (button_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (button_s1_agent_rp_valid),                //          .valid
		.sink_data          (button_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (button_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (button_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                    //       src.ready
		.src_valid          (router_007_src_valid),                    //          .valid
		.src_data           (router_007_src_data),                     //          .data
		.src_channel        (router_007_src_channel),                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (ssram0_uas_agent_rp_ready),               //      sink.ready
		.sink_valid         (ssram0_uas_agent_rp_valid),               //          .valid
		.sink_data          (ssram0_uas_agent_rp_data),                //          .data
		.sink_startofpacket (ssram0_uas_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ssram0_uas_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                    //       src.ready
		.src_valid          (router_008_src_valid),                    //          .valid
		.src_data           (router_008_src_data),                     //          .data
		.src_channel        (router_008_src_channel),                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (ssram1_uas_agent_rp_ready),               //      sink.ready
		.sink_valid         (ssram1_uas_agent_rp_valid),               //          .valid
		.sink_data          (ssram1_uas_agent_rp_data),                //          .data
		.sink_startofpacket (ssram1_uas_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ssram1_uas_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (pcie_ip_txs_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (pcie_ip_txs_agent_rp_valid),                                  //          .valid
		.sink_data          (pcie_ip_txs_agent_rp_data),                                   //          .data
		.sink_startofpacket (pcie_ip_txs_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (pcie_ip_txs_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                        //       src.ready
		.src_valid          (router_010_src_valid),                                        //          .valid
		.src_data           (router_010_src_data),                                         //          .data
		.src_channel        (router_010_src_channel),                                      //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pcie_ip_bar1_0_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset                  (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                            //          .valid
		.cmd_sink_data          (router_src_data),                                             //          .data
		.cmd_sink_channel       (router_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (pcie_ip_bar1_0_limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (pcie_ip_bar1_0_limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (pcie_ip_bar1_0_limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (pcie_ip_bar1_0_limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (pcie_ip_bar1_0_limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (pcie_ip_bar1_0_limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (pcie_ip_bar1_0_limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (pcie_ip_bar1_0_limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (pcie_ip_bar1_0_limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (pcie_ip_bar1_0_limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (pcie_ip_bar1_0_limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (pcie_ip_bar1_0_limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (133),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (130),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sgdma_m_read_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                       //          .valid
		.cmd_sink_data          (router_001_src_data),                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                 //          .endofpacket
		.cmd_src_ready          (sgdma_m_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sgdma_m_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sgdma_m_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sgdma_m_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sgdma_m_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.rsp_src_ready          (sgdma_m_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sgdma_m_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sgdma_m_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sgdma_m_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sgdma_m_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sgdma_m_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sgdma_m_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (128),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (120),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                            //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                    //          .ready
		.source0_valid         (onchip_memory_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) led_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                  //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                       //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                      //          .ready
		.source0_valid         (led_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) button_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                     //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                          //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                         //          .ready
		.source0_valid         (button_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ssram0_uas_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                      //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                           //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                          //          .ready
		.source0_valid         (ssram0_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ssram0_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (ssram0_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ssram0_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ssram0_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ssram0_uas_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ssram1_uas_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                      //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                           //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                          //          .ready
		.source0_valid         (ssram1_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ssram1_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (ssram1_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ssram1_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ssram1_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ssram1_uas_burst_adapter_source0_ready)          //          .ready
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //        clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (pcie_ip_bar1_0_limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel       (pcie_ip_bar1_0_limiter_cmd_src_channel),                      //           .channel
		.sink_data          (pcie_ip_bar1_0_limiter_cmd_src_data),                         //           .data
		.sink_startofpacket (pcie_ip_bar1_0_limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket   (pcie_ip_bar1_0_limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid         (pcie_ip_bar1_0_limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                        //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //           .valid
		.src0_data          (cmd_demux_src0_data),                                         //           .data
		.src0_channel       (cmd_demux_src0_channel),                                      //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                  //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                        //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                        //           .valid
		.src1_data          (cmd_demux_src1_data),                                         //           .data
		.src1_channel       (cmd_demux_src1_channel),                                      //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                  //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                        //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                        //           .valid
		.src2_data          (cmd_demux_src2_data),                                         //           .data
		.src2_channel       (cmd_demux_src2_channel),                                      //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                  //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                        //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                        //           .valid
		.src3_data          (cmd_demux_src3_data),                                         //           .data
		.src3_channel       (cmd_demux_src3_channel),                                      //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                  //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                        //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                        //           .valid
		.src4_data          (cmd_demux_src4_data),                                         //           .data
		.src4_channel       (cmd_demux_src4_channel),                                      //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                   //           .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),                  //        clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (sgdma_m_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sgdma_m_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sgdma_m_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sgdma_m_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sgdma_m_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sgdma_m_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                   //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //           .valid
		.src0_data          (cmd_demux_001_src0_data),                    //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //           .valid
		.src1_data          (cmd_demux_001_src1_data),                    //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),             //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                   //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                   //           .valid
		.src2_data          (cmd_demux_001_src2_data),                    //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                 //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),           //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),             //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                   //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                   //           .valid
		.src3_data          (cmd_demux_001_src3_data),                    //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                 //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),           //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)              //           .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.src1_data          (cmd_demux_002_src1_data),                 //          .data
		.src1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                //          .valid
		.src2_data          (cmd_demux_002_src2_data),                 //          .data
		.src2_channel       (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                //          .valid
		.src3_data          (cmd_demux_002_src3_data),                 //          .data
		.src3_channel       (cmd_demux_002_src3_channel),              //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                //          .valid
		.src0_data          (cmd_demux_003_src0_data),                 //          .data
		.src0_channel       (cmd_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                //          .valid
		.src0_data          (cmd_demux_004_src0_data),                 //          .data
		.src0_channel       (cmd_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),              //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                        //          .valid
		.src_data            (cmd_mux_001_src_data),                                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                            //          .valid
		.src_data            (cmd_mux_003_src_data),                                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                            //          .valid
		.src_data            (cmd_mux_004_src_data),                                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                     //          .valid
		.src_data            (cmd_mux_005_src_data),                                                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                                                //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),                                            //          .endofpacket
		.sink1_ready         (cmd_demux_002_src3_ready),                                                  //     sink1.ready
		.sink1_valid         (cmd_demux_002_src3_valid),                                                  //          .valid
		.sink1_channel       (cmd_demux_002_src3_channel),                                                //          .channel
		.sink1_data          (cmd_demux_002_src3_data),                                                   //          .data
		.sink1_startofpacket (cmd_demux_002_src3_startofpacket),                                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src3_endofpacket),                                            //          .endofpacket
		.sink2_ready         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink3_ready         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_002 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                //          .valid
		.src2_data          (rsp_demux_003_src2_data),                 //          .data
		.src2_channel       (rsp_demux_003_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                //          .valid
		.src2_data          (rsp_demux_004_src2_data),                 //          .data
		.src2_channel       (rsp_demux_004_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                        //      sink.ready
		.sink_channel       (router_010_src_channel),                                      //          .channel
		.sink_data          (router_010_src_data),                                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                              //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                                    //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                                    //          .valid
		.src2_data          (rsp_demux_005_src2_data),                                     //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                                  //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                            //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                              //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                                    //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                                    //          .valid
		.src3_data          (rsp_demux_005_src3_data),                                     //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                                  //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),                            //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket)                               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset               (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.sink1_ready         (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //     sink1.ready
		.sink1_valid         (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink1_channel       (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink1_data          (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink1_startofpacket (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink2_ready         (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),          //          .valid
		.sink2_channel       (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),        //          .channel
		.sink2_data          (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),           //          .data
		.sink2_startofpacket (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink3_ready         (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel       (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data          (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid         (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.sink4_channel       (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.sink4_data          (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.sink4_startofpacket (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket   (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                      //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                          //          .valid
		.src_data            (rsp_mux_001_src_data),                                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                     //          .endofpacket
		.sink1_ready         (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel       (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data          (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (rsp_demux_005_src0_ready),                                       //     sink3.ready
		.sink3_valid         (rsp_demux_005_src0_valid),                                       //          .valid
		.sink3_channel       (rsp_demux_005_src0_channel),                                     //          .channel
		.sink3_data          (rsp_demux_005_src0_data),                                        //          .data
		.sink3_startofpacket (rsp_demux_005_src0_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_005_src0_endofpacket)                                  //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                           //          .valid
		.src_data            (rsp_mux_002_src_data),                                            //          .data
		.src_channel         (rsp_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                          //          .channel
		.sink0_data          (rsp_demux_src2_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),                                      //          .endofpacket
		.sink1_ready         (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel       (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data          (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (rsp_demux_005_src1_ready),                                        //     sink3.ready
		.sink3_valid         (rsp_demux_005_src1_valid),                                        //          .valid
		.sink3_channel       (rsp_demux_005_src1_channel),                                      //          .channel
		.sink3_data          (rsp_demux_005_src1_data),                                         //          .data
		.sink3_startofpacket (rsp_demux_005_src1_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (rsp_demux_005_src1_endofpacket)                                   //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_003_src_data),                                                     //          .data
		.src_channel         (rsp_mux_003_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_004_src_data),                                                      //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_led_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                         //          .ready
		.in_data              (cmd_demux_src1_data),                                          //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_button_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                            //          .ready
		.in_data              (cmd_demux_src2_data),                                             //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                             //          .ready
		.in_data              (cmd_demux_src3_data),                                              //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_ssram0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                             //          .ready
		.in_data              (cmd_demux_src4_data),                                              //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_ssram1_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_ssram0_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                      //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                       //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                     //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                       //          .ready
		.in_data              (cmd_demux_001_src1_data),                                        //          .data
		.out_endofpacket      (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_ssram0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_ssram1_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                      //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_001_src2_valid),                                       //      sink.valid
		.in_channel           (cmd_demux_001_src2_channel),                                     //          .channel
		.in_startofpacket     (cmd_demux_001_src2_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src2_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_demux_001_src2_ready),                                       //          .ready
		.in_data              (cmd_demux_001_src2_data),                                        //          .data
		.out_endofpacket      (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_ssram1_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_ssram0_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                        //          .ready
		.in_data              (cmd_demux_002_src1_data),                                         //          .data
		.out_endofpacket      (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_ssram0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_ssram1_uas_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_002_src2_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_002_src2_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_002_src2_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src2_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_002_src2_ready),                                        //          .ready
		.in_data              (cmd_demux_002_src2_data),                                         //          .data
		.out_endofpacket      (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_ssram1_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_003_src0_data),                                                  //          .data
		.out_endofpacket      (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                  //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                   //          .data
		.out_endofpacket      (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) led_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                     //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                   //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                     //          .ready
		.in_data              (rsp_demux_001_src0_data),                                      //          .data
		.out_endofpacket      (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) button_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_002_src0_data),                                         //          .data
		.out_endofpacket      (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                         //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                       //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                         //          .ready
		.in_data              (rsp_demux_003_src0_data),                                          //          .data
		.out_endofpacket      (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram0_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram0_uas_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                      //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_003_src1_valid),                                       //      sink.valid
		.in_channel           (rsp_demux_003_src1_channel),                                     //          .channel
		.in_startofpacket     (rsp_demux_003_src1_startofpacket),                               //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src1_endofpacket),                                 //          .endofpacket
		.in_ready             (rsp_demux_003_src1_ready),                                       //          .ready
		.in_data              (rsp_demux_003_src1_data),                                        //          .data
		.out_endofpacket      (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram0_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram0_uas_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_003_src2_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_003_src2_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_003_src2_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src2_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_003_src2_ready),                                        //          .ready
		.in_data              (rsp_demux_003_src2_data),                                         //          .data
		.out_endofpacket      (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram0_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                         //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                       //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                         //          .ready
		.in_data              (rsp_demux_004_src0_data),                                          //          .data
		.out_endofpacket      (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram1_uas_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram1_uas_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                      //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_004_src1_valid),                                       //      sink.valid
		.in_channel           (rsp_demux_004_src1_channel),                                     //          .channel
		.in_startofpacket     (rsp_demux_004_src1_startofpacket),                               //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src1_endofpacket),                                 //          .endofpacket
		.in_ready             (rsp_demux_004_src1_ready),                                       //          .ready
		.in_data              (rsp_demux_004_src1_data),                                        //          .data
		.out_endofpacket      (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram1_uas_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ssram1_uas_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_004_src2_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_004_src2_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_004_src2_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src2_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_004_src2_ready),                                        //          .ready
		.in_data              (rsp_demux_004_src2_data),                                         //          .data
		.out_endofpacket      (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram1_uas_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_demux_005_src2_valid),                                                 //      sink.valid
		.in_channel           (rsp_demux_005_src2_channel),                                               //          .channel
		.in_startofpacket     (rsp_demux_005_src2_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src2_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_demux_005_src2_ready),                                                 //          .ready
		.in_data              (rsp_demux_005_src2_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (rsp_demux_005_src3_valid),                                                  //      sink.valid
		.in_channel           (rsp_demux_005_src3_channel),                                                //          .channel
		.in_startofpacket     (rsp_demux_005_src3_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src3_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_demux_005_src3_ready),                                                  //          .ready
		.in_data              (rsp_demux_005_src3_data),                                                   //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),                   // in_clk_0.clk
		.in_rst_0_reset (sgdma_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                //         .error
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),               // in_clk_0.clk
		.in_rst_0_reset (sgdma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)        //         .error
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),               // in_clk_0.clk
		.in_rst_0_reset (sgdma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (button_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (button_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)        //         .error
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),               // in_clk_0.clk
		.in_rst_0_reset (sgdma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ssram0_uas_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (ssram0_uas_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (ssram0_uas_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)        //         .error
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),               // in_clk_0.clk
		.in_rst_0_reset (sgdma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ssram1_uas_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (ssram1_uas_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (ssram1_uas_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)        //         .error
	);

	de2i_150_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pcie_ip_pcie_core_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pcie_ip_txs_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (pcie_ip_txs_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (pcie_ip_txs_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

endmodule

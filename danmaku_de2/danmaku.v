
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module danmaku(

    //////////// CLOCK //////////
    CLOCK_50,   // BANK 4
    CLOCK2_50,  // BANK 7
    CLOCK3_50,  // BANK 3A

    //////////// LED (High Active) //////////
    LEDG,
    LEDR,

    //////////// KEY (Active Low) //////////
    KEY,

    //////////// SW //////////
    SW,

    //////////// SEG7 (Low Active) //////////
    HEX0,
    HEX1,
    HEX2,
    HEX3,
    HEX4,
    HEX5,
    HEX6,
    HEX7,

    //////////// LCD //////////
    LCD_DATA,
    LCD_EN,
    LCD_ON,
    LCD_RS,
    LCD_RW,

    //////////// RS232 //////////
    UART_CTS,
    UART_RTS,
    UART_RXD,
    UART_TXD,

    //////////// VGA //////////
    VGA_B,
    VGA_BLANK_N,
    VGA_CLK,
    VGA_G,
    VGA_HS,
    VGA_R,
    VGA_SYNC_N,
    VGA_VS,

    //////////// I2C for EEPROM (I2C ADDRESS W/R = 0xA0/0xA1) //////////
    EEP_I2C_SCLK,
    EEP_I2C_SDAT,

    //////////// SDRAM //////////
    DRAM_ADDR,
    DRAM_BA,
    DRAM_CAS_N,
    DRAM_CKE,
    DRAM_CLK,
    DRAM_CS_N,
    DRAM_DQ,
    DRAM_DQM,
    DRAM_RAS_N,
    DRAM_WE_N,

    //////////// SSRAM //////////
    SSRAM_ADSC_N,
    SSRAM_ADSP_N,
    SSRAM_ADV_N,
    SSRAM_BE,
    SSRAM_CLK,
    SSRAM_GW_N,
    SSRAM_OE_N,
    SSRAM_WE_N,
    SSRAM0_CE_N,
    SSRAM1_CE_N,

    //////////// Data and Address bus shared by Flash & SSRAM //////////
    FS_ADDR,
    FS_DQ,

    //////////// PCIe //////////
    //PCIE_PERST_N,
    //PCIE_REFCLK_P,
    //PCIE_RX_P,
    //PCIE_TX_P,
    //PCIE_WAKE_N,

    //////////// GPIO, GPIO connect to GPIO Default //////////
    ExpGPIO,

    //////////// Fan Control //////////
    FAN_CTRL 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input                       CLOCK_50;
input                       CLOCK2_50;
input                       CLOCK3_50;

//////////// LED (High Active) //////////
output           [8:0]      LEDG;
output          [17:0]      LEDR;

//////////// KEY (Active Low) //////////
input            [3:0]      KEY;

//////////// SW //////////
input           [17:0]      SW;

//////////// SEG7 (Low Active) //////////
output           [6:0]      HEX0;
output           [6:0]      HEX1;
output           [6:0]      HEX2;
output           [6:0]      HEX3;
output           [6:0]      HEX4;
output           [6:0]      HEX5;
output           [6:0]      HEX6;
output           [6:0]      HEX7;

//////////// LCD //////////
inout            [7:0]      LCD_DATA;
output                      LCD_EN;
output                      LCD_ON;
output                      LCD_RS;
output                      LCD_RW;

//////////// RS232 //////////
input                       UART_CTS;
output                      UART_RTS;
input                       UART_RXD;
output                      UART_TXD;

//////////// VGA //////////
output           [7:0]      VGA_B;
output                      VGA_BLANK_N;
output                      VGA_CLK;
output           [7:0]      VGA_G;
output                      VGA_HS;
output           [7:0]      VGA_R;
output                      VGA_SYNC_N;
output                      VGA_VS;

//////////// I2C for EEPROM (I2C ADDRESS W/R = 0xA0/0xA1) //////////
output                      EEP_I2C_SCLK;
inout                       EEP_I2C_SDAT;

//////////// SDRAM //////////
output          [12:0]      DRAM_ADDR;
output           [1:0]      DRAM_BA;
output                      DRAM_CAS_N;
output                      DRAM_CKE;
output                      DRAM_CLK;
output                      DRAM_CS_N;
inout           [31:0]      DRAM_DQ;
output           [3:0]      DRAM_DQM;
output                      DRAM_RAS_N;
output                      DRAM_WE_N;

//////////// SSRAM //////////
output                      SSRAM_ADSC_N;
output                      SSRAM_ADSP_N;
output                      SSRAM_ADV_N;
output           [3:0]      SSRAM_BE;
output                      SSRAM_CLK;
output                      SSRAM_GW_N;
output                      SSRAM_OE_N;
output                      SSRAM_WE_N;
output                      SSRAM0_CE_N;
output                      SSRAM1_CE_N;

//////////// Data and Address bus shared by Flash & SSRAM //////////
output          [26:1]      FS_ADDR;
inout           [31:0]      FS_DQ;

//////////// PCIe //////////
//input                         PCIE_PERST_N;
//input                         PCIE_REFCLK_P;
//input              [1:0]      PCIE_RX_P;
//output             [1:0]      PCIE_TX_P;
//output                        PCIE_WAKE_N;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout           [35:0]      ExpGPIO;

//////////// Fan Control //////////
inout                       FAN_CTRL;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire sys_clk;
wire feeder_clk;
wire sys_rst_n;
wire locked;

wire scdt_to_overlay;
wire odck_to_overlay;
wire vsync_to_overlay;
wire hsync_to_overlay;
wire de_to_overlay;
wire[7:0] pixel_r_to_overlay;
wire[7:0] pixel_g_to_overlay;
wire[7:0] pixel_b_to_overlay;

wire[31:0] pixel_fifo_data;
wire pixel_fifo_req;
wire pixel_fifo_clk;
wire pixel_fifo_empty;

wire pixel_clk_o;
wire[3:0] i2c_drive_low;
wire[2:0] unused;
//=======================================================
//  Structural coding
//=======================================================

sys_pll sys_pll_1(
    !KEY[0],//areset
    CLOCK3_50,
    sys_clk,
    feeder_clk,
    locked
);

i2c_nios u0 (
        .clk_clk       (sys_clk),       //   clk.clk
        .reset_reset_n (sys_rst_n), // reset.reset_n
		  .p_output_export({unused,ExpGPIO[25],i2c_drive_low}),
        .p_input_export({4'bzzzz,ExpGPIO[35:32]}),    //  gpio.export
        .edid_scl      (ExpGPIO[32]),
        .edid_sda       (ExpGPIO[33]),
		  .lcd_data       (LCD_DATA),
		  .lcd_E         (LCD_EN),
		  .lcd_RS         (LCD_RS),
		  .lcd_RW         (LCD_RW)
    );

tfp401a dvi_in_1(
    .rst(sys_rst_n),

    .odck_in(ExpGPIO[24]),
    .vsync_in(ExpGPIO[28]),
    .hsync_in(ExpGPIO[27]),
    .de_in(ExpGPIO[26]),
    .pixel_r_in(ExpGPIO[23:16]),
    .pixel_g_in(ExpGPIO[15:8]),
    .pixel_b_in(ExpGPIO[7:0]),

    .scdt_o(scdt_to_overlay),
    .odck_o(odck_to_overlay),
    .vsync_o(vsync_to_overlay),
    .hsync_o(hsync_to_overlay),
    .de_o(de_to_overlay),
    .pixel_r_o(pixel_r_to_overlay),
    .pixel_g_o(pixel_g_to_overlay),
    .pixel_b_o(pixel_b_to_overlay)
);

danmaku_overlay overlay_logic_1(
   .rst(sys_rst_n),

   .scdt_in(scdt_to_overlay),
   .odck_in(odck_to_overlay),
   .vsync_in(vsync_to_overlay),
   .hsync_in(hsync_to_overlay),
   .de_in(de_to_overlay),
   .pixel_r_in(pixel_r_to_overlay),
   .pixel_g_in(pixel_g_to_overlay),
   .pixel_b_in(pixel_b_to_overlay),
   .fifoData_in(pixel_fifo_data),
   .fifoRdEmpty(pixel_fifo_empty),
   .noDebug(SW[0]), 

   .pixel_clk_o(pixel_clk_o),
   .vsync_o(VGA_VS),
   .hsync_o(VGA_HS),
   .de_o(VGA_BLANK_N),
   .pixel_r_o(VGA_R),
   .pixel_g_o(VGA_G),
   .pixel_b_o(VGA_B),
   .fifoRdclk(pixel_fifo_clk),
   .fifoRdreq(pixel_fifo_req),

   .screenX(),
   .screenY(),
   .screenPxl(),
  
   .nowX(),
   .nowY(),
   .nowPxl(),
  
   .ovf(),
   .syncWaitV()

);

test_img_feeder feeder1(
  .rst(sys_rst_n),
  .clk(sys_clk),
  .clk_feeder(feeder_clk),

  .fifoData_out(pixel_fifo_data),
  .fifoRdclk(pixel_fifo_clk),
  .fifoRdreq(pixel_fifo_req),
  .fifoRdempty(pixel_fifo_empty),
  
  .pause(SW[1])
);

led led_sysclk(
    .clk(sys_clk),
    .rst(sys_rst_n),
    .status_led(LEDG[1])
);
led led_pixclk(
    .clk(odck_to_overlay),
    .rst(sys_rst_n),
    .status_led(LEDG[0])
);

assign sys_rst_n = locked;

// assign ExpGPIO[32] = i2c_drive_low[0] ? 1'b0 : 1'bz;
// assign ExpGPIO[33] = i2c_drive_low[1] ? 1'b0 : 1'bz;
assign ExpGPIO[34] = i2c_drive_low[2] ? 1'b0 : 1'bz;
assign ExpGPIO[35] = i2c_drive_low[3] ? 1'b0 : 1'bz;

//assign ExpGPIO[25] = 1'b1; //hpd

assign LEDG[2] = scdt_to_overlay;

// assign VGA_VS = vsync_to_overlay;
// assign VGA_HS = hsync_to_overlay;
// assign VGA_BLANK_N = de_to_overlay;
assign VGA_SYNC_N = 1'b1;
assign VGA_CLK = ~pixel_clk_o;
// assign VGA_R = pixel_r_to_overlay;
// assign VGA_G = pixel_g_to_overlay;
// assign VGA_B = pixel_b_to_overlay;

assign LEDR[3:0]=i2c_drive_low;
assign LEDR[4]=ExpGPIO[25];
assign LEDR[8:5]=ExpGPIO[35:32];
//////////// FAN Control //////////
assign FAN_CTRL = SW[17]; // turn off FAN

assign LCD_ON = 1'b1;

endmodule
